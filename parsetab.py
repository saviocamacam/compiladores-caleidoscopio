
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftELSEleftEQNEGEGTLELTleftADDSUBleftMULDIVEQ NE GE GT LE LT ADD SUB MUL DIV ID NUM LPAR RPAR COMMA THEN DEF EXTERN ELSE IF\n        top : definition\n            | extern\n            | expr\n        definition : DEF prototype exprprototype : ID LPAR arg_names RPARarg_names : arg_names : ID COMMA arg_namesarg_names : ID\n        expr : binary_expr\n             | call_expr\n             | if_expr\n             | par_expr\n             | id_expr\n             | num_expr\n        \n        binary_expr : expr EQ expr\n                    | expr NE expr\n                    | expr GE expr\n                    | expr GT expr\n                    | expr LE expr\n                    | expr LT expr\n                    | expr ADD expr\n                    | expr SUB expr\n                    | expr MUL expr\n                    | expr DIV expr\n        call_expr : ID LPAR call_args RPARcall_args : call_args : expr COMMA call_argscall_args : exprif_expr : IF expr THEN expr ELSE exprpar_expr : LPAR expr RPARid_expr : IDnum_expr : NUMextern : EXTERN prototype'
    
_lr_action_items = {'LPAR':([0,1,10,11,19,20,21,23,24,25,26,27,28,29,30,31,32,38,52,54,57,],[1,1,21,1,34,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-5,1,]),'GT':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,23,-14,-13,23,23,-30,23,23,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,23,23,]),'LE':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,29,-14,-13,29,29,-30,29,29,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,29,29,]),'GE':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,28,-14,-13,28,28,-30,28,28,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,28,28,]),'SUB':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,24,-14,-13,24,24,-30,24,24,24,-22,-21,24,24,24,24,-23,-24,24,-25,24,24,]),'THEN':([2,7,8,9,10,13,15,16,22,33,39,40,41,42,43,44,45,46,47,48,51,59,],[-12,-32,-10,-9,-31,-11,-14,-13,38,-30,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,-29,]),'RPAR':([2,7,8,9,10,13,15,16,17,21,33,34,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,58,59,],[-12,-32,-10,-9,-31,-11,-14,-13,33,-26,-30,-6,51,-28,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,54,-8,-25,-26,-6,-27,-7,-29,]),'$end':([2,3,6,7,8,9,10,12,13,14,15,16,18,33,35,39,40,41,42,43,44,45,46,47,48,51,54,59,],[-12,-2,0,-32,-10,-9,-31,-1,-11,-3,-14,-13,-33,-30,-4,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,-5,-29,]),'LT':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,27,-14,-13,27,27,-30,27,27,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,27,27,]),'NE':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,26,-14,-13,26,26,-30,26,26,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,26,26,]),'ADD':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,25,-14,-13,25,25,-30,25,25,25,-22,-21,25,25,25,25,-23,-24,25,-25,25,25,]),'NUM':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,54,57,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-5,7,]),'COMMA':([2,7,8,9,10,13,15,16,33,37,39,40,41,42,43,44,45,46,47,48,50,51,59,],[-12,-32,-10,-9,-31,-11,-14,-13,-30,52,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,55,-25,-29,]),'EXTERN':([0,],[4,]),'MUL':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,30,-14,-13,30,30,-30,30,30,30,30,30,30,30,30,30,-23,-24,30,-25,30,30,]),'DIV':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,31,-14,-13,31,31,-30,31,31,31,31,31,31,31,31,31,-23,-24,31,-25,31,31,]),'ELSE':([2,7,8,9,10,13,15,16,33,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,-14,-13,-30,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,57,-29,]),'EQ':([2,7,8,9,10,13,14,15,16,17,22,33,35,37,39,40,41,42,43,44,45,46,47,48,51,53,59,],[-12,-32,-10,-9,-31,-11,32,-14,-13,32,32,-30,32,32,-18,-22,-21,-16,-20,-17,-19,-23,-24,-15,-25,32,32,]),'ID':([0,1,4,5,11,20,21,23,24,25,26,27,28,29,30,31,32,34,38,52,54,55,57,],[10,10,19,19,10,10,10,10,10,10,10,10,10,10,10,10,10,50,10,10,-5,50,10,]),'DEF':([0,],[5,]),'IF':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,54,57,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-5,11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition':([0,],[12,]),'if_expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[14,17,22,35,37,39,40,41,42,43,44,45,46,47,48,53,37,59,]),'top':([0,],[6,]),'call_expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'binary_expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'call_args':([21,52,],[36,56,]),'arg_names':([34,55,],[49,58,]),'par_expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'extern':([0,],[3,]),'prototype':([4,5,],[18,20,]),'id_expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'num_expr':([0,1,11,20,21,23,24,25,26,27,28,29,30,31,32,38,52,57,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> top","S'",1,None,None,None),
  ('top -> definition','top',1,'p_top','parser.py',38),
  ('top -> extern','top',1,'p_top','parser.py',39),
  ('top -> expr','top',1,'p_top','parser.py',40),
  ('definition -> DEF prototype expr','definition',3,'p_definition','parser.py',45),
  ('prototype -> ID LPAR arg_names RPAR','prototype',4,'p_prototype','parser.py',49),
  ('arg_names -> <empty>','arg_names',0,'p_arg_names_1','parser.py',53),
  ('arg_names -> ID COMMA arg_names','arg_names',3,'p_arg_names_2','parser.py',56),
  ('arg_names -> ID','arg_names',1,'p_arg_names_3','parser.py',60),
  ('expr -> binary_expr','expr',1,'p_expr','parser.py',65),
  ('expr -> call_expr','expr',1,'p_expr','parser.py',66),
  ('expr -> if_expr','expr',1,'p_expr','parser.py',67),
  ('expr -> par_expr','expr',1,'p_expr','parser.py',68),
  ('expr -> id_expr','expr',1,'p_expr','parser.py',69),
  ('expr -> num_expr','expr',1,'p_expr','parser.py',70),
  ('binary_expr -> expr EQ expr','binary_expr',3,'p_binary_expr','parser.py',76),
  ('binary_expr -> expr NE expr','binary_expr',3,'p_binary_expr','parser.py',77),
  ('binary_expr -> expr GE expr','binary_expr',3,'p_binary_expr','parser.py',78),
  ('binary_expr -> expr GT expr','binary_expr',3,'p_binary_expr','parser.py',79),
  ('binary_expr -> expr LE expr','binary_expr',3,'p_binary_expr','parser.py',80),
  ('binary_expr -> expr LT expr','binary_expr',3,'p_binary_expr','parser.py',81),
  ('binary_expr -> expr ADD expr','binary_expr',3,'p_binary_expr','parser.py',82),
  ('binary_expr -> expr SUB expr','binary_expr',3,'p_binary_expr','parser.py',83),
  ('binary_expr -> expr MUL expr','binary_expr',3,'p_binary_expr','parser.py',84),
  ('binary_expr -> expr DIV expr','binary_expr',3,'p_binary_expr','parser.py',85),
  ('call_expr -> ID LPAR call_args RPAR','call_expr',4,'p_call_expr','parser.py',90),
  ('call_args -> <empty>','call_args',0,'p_call_args_1','parser.py',94),
  ('call_args -> expr COMMA call_args','call_args',3,'p_call_args_2','parser.py',97),
  ('call_args -> expr','call_args',1,'p_call_args_3','parser.py',101),
  ('if_expr -> IF expr THEN expr ELSE expr','if_expr',6,'p_if_expr','parser.py',105),
  ('par_expr -> LPAR expr RPAR','par_expr',3,'p_par_expr','parser.py',109),
  ('id_expr -> ID','id_expr',1,'p_id_expr','parser.py',113),
  ('num_expr -> NUM','num_expr',1,'p_num_expr','parser.py',117),
  ('extern -> EXTERN prototype','extern',2,'p_extern','parser.py',121),
]
